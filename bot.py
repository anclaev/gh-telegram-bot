from telegram import ForceReply, Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

words = {
     "der Kaiser": "Кайзер - это заимствованное из немецкого слово, называющее немецкого монарха, восходит к тем же корням, что и русское царь, а именно, к имени римского диктатора, положившего начало императорской власти в Древнем Риме – Гая Юлия Цезаря, по-латински Caesar.",
     "кайзер": "der Kaiser - это заимствованное из немецкого слово, называющее немецкого монарха, восходит к тем же корням, что и русское царь, а именно, к имени римского диктатора, положившего начало императорской власти в Древнем Риме – Гая Юлия Цезаря, по-латински Caesar.",
     "der Blitzkrieg": "Блицкриг - молниеносная война; теория ведения скоротечной войны, согласно которой победа достигается в короткие сроки, исчисляемые днями, неделями или месяцами.",
     "блицкриг": "der Blitzkrieg - Молниеносная война; теория ведения скоротечной войны, согласно которой победа достигается в короткие сроки, исчисляемые днями, неделями или месяцами.",
     "die Wiedervereinigung": "Одно из значений слова — объединение Германии, официально — немецкое воссоединение (нем. Deutsche Wiedervereinigung). Так называют вхождение ГДР в состав ФРГ, которое произошло 3 октября 1990 года.",
     "видерферайнигунг": "die Wiedervereinigung - одно из значений слова — объединение Германии, официально — немецкое воссоединение (нем. Deutsche Wiedervereinigung). Так называют вхождение ГДР в состав ФРГ, которое произошло 3 октября 1990 года.",
     "der König": "Король, царь, вождь (при общинно-родовом строе).",
     "кёниг": "der König - король, царь, вождь (при общинно-родовом строе).",
     "der Wagen": "В историческом контексте — колесница означает большой колёсный экипаж, использовавший преимущественно движущую силу скаковых животных.",
     "ваген": "der Wagen - в историческом контексте — колесница означает большой колёсный экипаж, использовавший преимущественно движущую силу скаковых животных.",
     "der Soldat": "Солдат - военнослужащий вооруженных сил страны, пионер, призывник, солдат-медик, воин, танкист.",
     "зольдат": "der Soldat - военнослужащий вооруженных сил страны, пионер, призывник, солдат-медик, воин, танкист.",
     "die Zeitenwende": "Поворотный момент» (об истории) - начало новой эры, «поворотный момент истории», значимое событие, изменившее политику, экономику и культуру.",
     "цайтенвенде": "die Zeitenwende - «поворотный момент (об истории)» - начало новой эры, «поворотный момент истории», значимое событие, изменившее политику, экономику и культуру.",
     "der Vertrag": "Договор - соглашение между двумя сторонами об условиях развития экономической, культурной, политической или любой другой сферы в рамках правового характера.",
     "фертраг": "der Vertrag - договор - соглашение между двумя сторонами об условиях развития экономической, культурной, политической или любой другой сферы в рамках правового характера.",
     "die Politik": "Политика - система управления обществом, охватывающая все отношения людей, возникающие на основе власти.",
     "политик": "die Politik - политика- система управления обществом, охватывающая все отношения людей, возникающие на основе власти.",
}

def findWord(word: str) -> str:
    result = "К сожалению, я не знаю такого слова."
    target = word.lower().strip()

    for i in words:
        if i.lower() == target:
            return words.get(i)
        
    return result

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        rf"Привет, {user.mention_html()}! Я помогу перевести немецкую историческую лексику на русский язык. Отправь мне слово, и я переведу его. 🧑🏼‍🏫",
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("Отправь мне слово на немецком языке или его русскую интерпретацию и я поищу его в своём словаре. Если получится найти, обязательно поделюсь с тобой! 😉")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(findWord(update.message.text))

def run(token: str) -> None:
        app = Application.builder().token(token).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
        app.run_polling(allowed_updates=Update.ALL_TYPES)